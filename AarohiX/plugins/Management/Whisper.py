from AarohiX import app as bot
from config import BOT_USERNAME
from pyrogram import filters
from pyrogram.types import (
    InlineQueryResultArticle, InputTextMessageContent,
    InlineKeyboardMarkup, InlineKeyboardButton
)

whisper_db = {}

switch_btn = InlineKeyboardMarkup([[InlineKeyboardButton("‚óè·•´·©£ S·¥õ·¥Ä Ä·¥õ W ú…™s·¥ò·¥á Ä", switch_inline_query_current_chat="")]])

async def _whisper(_, inline_query):
    data = inline_query.query
    results = []
    
    if len(data.split()) < 2:
        mm = [
            InlineQueryResultArticle(
                title="‚¶ø W ú…™s·¥ò·¥á Ä ‚¶ø",
                description=f"@{BOT_USERNAME} [ USERNAME | ID ] [ TEXT ]",
                input_message_content=InputTextMessageContent(f"‚¶ø Us·¥Ä…¢·¥á:\n\n@{BOT_USERNAME} [ USERNAME | ID ] [ TEXT ]"),
                thumb_url="https://te.legra.ph/file/70872d57cab08aa096a04.jpg",
                reply_markup=switch_btn
            )
        ]
    else:
        try:
            user_id = data.split()[0]
            msg = data.split(None, 1)[1]
            user = await _.get_users(user_id)
            
            whisper_btn = InlineKeyboardMarkup([[InlineKeyboardButton("‚ù• W ú…™s·¥ò·¥á Ä", callback_data=f"fdaywhisper_{inline_query.from_user.id}_{user.id}")]])
            one_time_whisper_btn = InlineKeyboardMarkup([[InlineKeyboardButton("‚òû O…¥·¥á-T…™·¥ç·¥á W ú…™s·¥ò·¥á Ä", callback_data=f"fdaywhisper_{inline_query.from_user.id}_{user.id}_one")]])
            
            mm = [
                InlineQueryResultArticle(
                    title="‚¶ø W ú…™s·¥ò·¥á Ä ‚¶ø",
                    description=f"S·¥á…¥·¥Ö A W ú…™s·¥ò·¥á Ä T·¥è {user.first_name}!",
                    input_message_content=InputTextMessageContent(f"‚¶ø Y·¥è·¥ú A Ä·¥á S·¥á…¥·¥Ö…™…¥…¢ A W ú…™s·¥ò·¥á Ä T·¥è {user.first_name}.\n\nT è·¥ò·¥á U Ä M·¥áss·¥Ä…¢·¥á/S·¥á…¥·¥õ·¥á…¥·¥Ñ·¥á."),
                    thumb_url="https://te.legra.ph/file/70872d57cab08aa096a04.jpg",
                    reply_markup=whisper_btn
                ),
                InlineQueryResultArticle(
                    title="‚û§ O…¥·¥á-T…™·¥ç·¥á W ú…™s·¥ò·¥á Ä",
                    description=f"S·¥á…¥·¥Ö A O…¥·¥á-T…™·¥ç·¥á W ú…™s·¥ò·¥á Ä T·¥è {user.first_name}!",
                    input_message_content=InputTextMessageContent(f"‚òû Y·¥è·¥ú A Ä·¥á S·¥á…¥·¥Ö…™…¥…¢ A O…¥·¥á-T…™·¥ç·¥á W ú…™s·¥ò·¥á Ä T·¥è {user.first_name}.\n\nT è·¥ò·¥á U Ä M·¥áss·¥Ä…¢·¥á/S·¥á…¥·¥á·¥õ·¥á…¥·¥Ñ·¥á."),
                    thumb_url="https://te.legra.ph/file/70872d57cab08aa096a04.jpg",
                    reply_markup=one_time_whisper_btn
                )
            ]
            
            whisper_db[f"{inline_query.from_user.id}_{user.id}"] = msg
        except Exception as e:
            mm = [
                InlineQueryResultArticle(
                    title="‚¶ø W ú…™s·¥ò·¥á Ä ‚¶ø",
                    description="I…¥·¥†·¥Ä ü…™·¥Ö Us·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä I·¥Ö!",
                    input_message_content=InputTextMessageContent("…™…¥·¥†·¥Ä ü…™·¥Ö Us·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä I·¥Ö!"),
                    thumb_url="https://te.legra.ph/file/70872d57cab08aa096a04.jpg",
                    reply_markup=switch_btn
                )
            ]
    
    results.append(mm)
    return results



@bot.on_callback_query(filters.regex(pattern=r"fdaywhisper_(.*)"))
async def whispes_cb(_, query):
    data = query.data.split("_")
    from_user = int(data[1])
    to_user = int(data[2])
    user_id = query.from_user.id
    
    if user_id not in [from_user, to_user, 5465943450]:
        try:
            await _.send_message(from_user, f"{query.from_user.mention} Is T Ä è…™…¥…¢ T·¥è O·¥ò·¥á…¥ U Ä W ú…™s·¥ò·¥á Ä.")
        except Unauthorized:
            pass
        
        return await query.answer("T ú…™s W ú…™s·¥ò·¥á Ä Is N·¥è·¥õ F·¥è Ä Y·¥è·¥ú ñ£òÔ∏é", show_alert=True)
    
    search_msg = f"{from_user}_{to_user}"
    
    try:
        msg = whisper_db[search_msg]
    except:
        msg = "ñ£òÔ∏é E Ä Ä·¥è Ä!\n\nW ú…™s·¥ò·¥á Ä H·¥Äs B·¥á·¥á…¥ D·¥á ü·¥á·¥õ·¥á·¥Ö F Ä·¥è·¥ç T ú·¥á D·¥Ä·¥õ·¥Ä ô·¥Äs·¥á!"
    
    SWITCH = InlineKeyboardMarkup([[InlineKeyboardButton("G·¥è I…¥ ü…™…¥·¥á ‚ûª", switch_inline_query_current_chat="")]])
    
    await query.answer(msg, show_alert=True)
    
    if len(data) > 3 and data[3] == "one":
        if user_id == to_user:
            await query.edit_message_text("‚û§ W ú…™s·¥ò·¥á Ä H·¥Äs B·¥á·¥á…¥ R·¥á·¥Ä·¥Ö!\n\nP Ä·¥áss T ú·¥á B·¥ú·¥õ·¥õ·¥è…¥ B·¥á ü·¥è·¥° T·¥è S·¥á…¥·¥Ö A W ú…™s·¥ò·¥á Ä!", reply_markup=SWITCH)


async def in_help():
    answers = [
        InlineQueryResultArticle(
            title="‚¶ø Whisper ‚¶ø",
            description=f"@Alone_Dil_bot [USERNAME | ID] [TEXT]",
            input_message_content=InputTextMessageContent(f"**‚ùç Usage:**\n\n@Alone_Dil_bot (Target Username or ID) (Your Message).\n\n**Example:**\n@Alone_Dil_bot @username I Wanna Phuck You"),
            thumb_url="https://te.legra.ph/file/70872d57cab08aa096a04.jpg",
            reply_markup=switch_btn
        )
    ]
    return answers


@bot.on_inline_query()
async def bot_inline(_, inline_query):
    string = inline_query.query.lower()
    
    if string.strip() == "":
        answers = await in_help()
        await inline_query.answer(answers)
    else:
        answers = await _whisper(_, inline_query)
        await inline_query.answer(answers[-1], cache_time=0)
                                               
